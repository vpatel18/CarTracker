import { OwlDateTimeInputDirective } from './date-time-picker-input.directive';
import { DateTimeAdapter } from './adapter/date-time-adapter.class';
import { OwlDateTimeFormats } from './adapter/date-time-format.class';
export declare type PickerType = 'both' | 'calendar' | 'timer';
export declare abstract class OwlDateTime<T> {
    protected dateTimeAdapter: DateTimeAdapter<T>;
    protected dateTimeFormats: OwlDateTimeFormats;
    private _pickerType;
    pickerType: PickerType;
    showSecondsTimer: boolean;
    hour12Timer: boolean;
    startView: 'month' | 'year';
    stepHour: number;
    stepMinute: number;
    stepSecond: number;
    private _firstDayOfWeek;
    firstDayOfWeek: number;
    private _id;
    readonly id: string;
    readonly abstract selected: T | null;
    readonly abstract selecteds: T[] | null;
    readonly abstract dateTimeFilter: (date: T | null) => boolean;
    readonly abstract dtInput: OwlDateTimeInputDirective<T> | null;
    readonly abstract maxDateTime: T | null;
    readonly abstract minDateTime: T | null;
    readonly abstract selectMode: 'single' | 'range';
    readonly abstract startAt: T | null;
    readonly abstract pickerMode: 'popup' | 'dialog' | 'inline';
    abstract select(date: T | T[]): void;
    readonly formatString: string;
    dateTimeChecker: (dateTime: T) => boolean;
    readonly disabled: boolean;
    constructor(dateTimeAdapter: DateTimeAdapter<T>, dateTimeFormats: OwlDateTimeFormats);
    protected getValidDate(obj: any): T | null;
}
